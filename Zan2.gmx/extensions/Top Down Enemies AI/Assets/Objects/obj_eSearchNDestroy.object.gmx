<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemies</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
image_index = 3;

attackspeed = 20;//set how many steps before the enemy can attack again
sight = 128;//set how far the enemy can see
range = 64;//set how far the enemy can attack from
spd = 1;//set speed
target = obj_player;//set target
wall = obj_wall;//set wall instance
path = path_add();//Init path to find player
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//attacking timer
/***DO NOT DELETE THIS EVENT***/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//look where its going...
image_angle = direction;

if distance_to_object(target) &gt; sight || collision_line(x,y,target.x,target.y,wall,1,1)//if the target is outside of the enemy's line of sight...
{
    state = 0;//roam
    
    //the below function is the most accurate method of pathfinding
    //however it becomes quite slow when there are many instances using it
    //and/or when it is used in a very large room
    //also it takes more processing power when there are more cells to check - defined in the obj_enemy_control instance
    //so; try to have a large cell size, few instances using the function and no world-sized rooms, for best efficiency
    if mp_grid_path(global.grid,path,x,y,target.x,target.y,1)
    {move_towards_point(path_get_point_x(path,1),path_get_point_y(path,1),spd);}
    //you'll note that all the enemies use this function to return to their starting positions as its the most effective
    //however, if efficiency becomes a problem with your game, due to the forementioned bottlenecks, use
    //mp_potential_step_object(xgoal,ygoal,speed,wallobject) instead, as demonstrated when the enemies follow the player
    
}
else
{
    path_end();
    if distance_to_object(target) &lt; range//if the target is within the enemy's range
    {
        speed = 0;//stop moving
        direction = point_direction(x,y,target.x,target.y);//look at the target
        state = 1;//start attacking
    }
    else//move towards the player...
    {
        state = 0;//roam
        speed = 0;//when using the below function we need to set the speed to 0
        mp_potential_step_object(target.x,target.y,spd,wall);//move towards the target avoiding wall objects
    }
}

if state = 1//if attacking
{
    if alarm[0] &lt; 0
    {
        //Bullet Variables
        var blt = instance_create(x,y,obj_bullet);
        blt.speed = 12;
        //make bullet aim at target...
        blt.direction = direction;
        blt.image_angle = blt.direction;
        alarm[0] = attackspeed;//reset timer for attacking
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
draw_self();
if global.debug = true
{
    if !collision_line(x,y,target.x,target.y,wall,1,1)
    {draw_set_color(c_lime);}
    else
    {draw_set_color(c_red);}
    draw_line(x,y,target.x,target.y);//LOS
    if distance_to_object(target) &gt; sight
    {draw_set_color(c_red);}
    else
    {draw_set_color(c_lime);}
    draw_circle(x,y,sight+20,1);//sight
    if distance_to_object(target) &gt; range
    {draw_set_color(c_red);}
    else
    {draw_set_color(c_lime);}
    draw_circle(x,y,range+24,1);//range
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
