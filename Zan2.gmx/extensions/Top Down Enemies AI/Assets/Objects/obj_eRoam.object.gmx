<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemies</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
image_index = 0;

//Customize:
direction = random(360);//set the starting direction of the enemy
spd = 1.5;//set the speed of the enemy
turnspeed = 0.5;//set how fast to move when turning (the closer to spd the smoother BUT more likely to cause errors)
steering = -4;//set the amount and which direction (&lt;0 = clockwise) to turn when encountering a wall...
//--------------the futher away from 0 in either direction, the sharper the turning will be
attackspeed = 20;//set how many steps before the enemy can attack again
sight = 128;//set how far the enemy can see
range = 64;//set how far the enemy can attack from
target = obj_player;//set the target instance
wall = obj_wall;//set the wall object to check for
dirchangetime = room_speed*5;//set the amount of steps until the steering direction reverses
turntime = room_speed*15;//set the amount of steps until the enemy "randomly" turns
turnlengthtime = 10+random(30);//set the amount of steps the enemy will turn for
/*Check-for-wall variables*/
checkdistance = 48;//how far in front of the enemy to check for a wall
check1width = 10;//how far left and right of the enemy's coordinates to check for a wall
check2width = 15;//how far left and right of the checkdistance to check for a wall

//DO NOT customize:
state = 0;//the "state" of the enemy - roaming(0), attacking(1)
speed = spd;
randomturn = false;//whether the enemy is turning or not
alarm[0] = dirchangetime;//Init timer for direction change
alarm[1] = turntime;//Init timer for randomly turning
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//attacking timer
/***DO NOT DELETE THIS EVENT***/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomturn = !randomturn;//set whether the enemy is turning or not
if randomturn = true
{alarm[1] = turnlengthtime;}//set the timer for how long the enemy will turn
else
{alarm[1] = turntime;}//set the timer for how long untill the enemy will turn again
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if distance_to_object(wall) &gt; sprite_width*2//if the enemy isn't currently near a wall...
{steering *= -1;}//reverse the turning direction used when encountering walls
alarm[0] = dirchangetime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direction;//look where its going

if distance_to_object(target) &gt; sight || collision_line(x,y,target.x,target.y,wall,1,1)//if the target is outside of the enemy's line of sight...
{
    state = 0;//roam
    speed = spd;//start moving again
    //turn when there is a wall in front of the enemy...
    if collision_line(x+lengthdir_x(check1width,image_angle+90),y+lengthdir_y(check1width,image_angle+90),x+lengthdir_x(checkdistance,image_angle+check2width),y+lengthdir_y(checkdistance,image_angle+check2width),wall,1,1)
    || collision_line(x,y,x+lengthdir_x(checkdistance,image_angle),y+lengthdir_y(checkdistance,image_angle),wall,1,1)
    || collision_line(x+lengthdir_x(check1width,image_angle-90),y+lengthdir_y(check1width,image_angle-90),x+lengthdir_x(checkdistance,image_angle-check2width),y+lengthdir_y(checkdistance,image_angle-check2width),wall,1,1)
    {direction += steering; speed = turnspeed;}
    else if randomturn = true//if there isn't a wall in front of the enemy, turn if the randomturn variable is true
    {direction += steering;}
}
else
{
    if distance_to_object(target) &lt; range//if the target is within the enemy's range
    {
        speed = 0;//stop moving
        direction = point_direction(x,y,target.x,target.y);//look at the target
        state = 1;//start attacking
    }
    else//move towards the player...
    {
        state = 0;//roam
        speed = 0;//when using the below function we need to set the speed to 0
        mp_potential_step_object(target.x,target.y,spd,wall);//move towards the target avoiding wall objects
    }
}

if state = 1//if attacking
{
    if alarm[2] &lt; 0
    {
        //Bullet Variables
        var blt = instance_create(x,y,obj_bullet);
        blt.speed = 12;
        //make bullet aim at target...
        blt.direction = direction;
        blt.image_angle = blt.direction;
        alarm[2] = attackspeed;//reset timer for attacking
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
draw_self();
if global.debug = true
{
    draw_set_color(c_black);
    draw_set_halign(fa_center);
    //steering...
    draw_text(x,y-28,string(steering));
    draw_set_halign(fa_left);
    //wall check...
    draw_line(x+lengthdir_x(check1width,image_angle+90),y+lengthdir_y(check1width,image_angle+90),x+lengthdir_x(checkdistance,image_angle+check2width),y+lengthdir_y(checkdistance,image_angle+check2width));
    draw_line(x,y,x+lengthdir_x(checkdistance,image_angle),y+lengthdir_y(checkdistance,image_angle));
    draw_line(x+lengthdir_x(check1width,image_angle-90),y+lengthdir_y(check1width,image_angle-90),x+lengthdir_x(checkdistance,image_angle-check2width),y+lengthdir_y(checkdistance,image_angle-check2width));
    if !collision_line(x,y,target.x,target.y,wall,1,1)
    {draw_set_color(c_lime);}
    else
    {draw_set_color(c_red);}
    draw_line(x,y,target.x,target.y);//LOS
    if distance_to_object(target) &gt; sight
    {draw_set_color(c_red);}
    else
    {draw_set_color(c_lime);}
    draw_circle(x,y,sight+20,1);//sight
    if distance_to_object(target) &gt; range
    {draw_set_color(c_red);}
    else
    {draw_set_color(c_lime);}
    draw_circle(x,y,range+24,1);//range
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
